import React, { useState, useEffect } from 'react';

// Custom AnimatedList Component
const AnimatedList = ({ items, className = "", delay = 500 }) => {
  const [visibleItems, setVisibleItems] = useState([]);
  const [currentIndex, setCurrentIndex] = useState(0);

  useEffect(() => {
    if (currentIndex < items.length) {
      const timer = setTimeout(() => {
        setVisibleItems(prev => [...prev, items[currentIndex]]);
        setCurrentIndex(prev => prev + 1);
      }, delay);
      return () => clearTimeout(timer);
    }
  }, [currentIndex, items, delay]);

  return (
    <ul className={className}>
      {visibleItems.map((item, index) => (
        <li 
          key={index} 
          className="transform transition-all duration-500 hover:scale-105 hover:text-green-300"
          style={{
            animation: `slideInRight 0.6s ease-out ${index * 0.2}s both`
          }}
        >
          {item}
        </li>
      ))}
    </ul>
  );
};

// Myth Card Component
const MythCard = ({ myth, truth, icon, isRevealed, onReveal, delay = 0 }) => {
  return (
    <div 
      className={`relative group cursor-pointer transition-all duration-500 ${
        isRevealed ? 'scale-105' : 'hover:scale-102'
      }`}
      onClick={onReveal}
      style={{ animationDelay: `${delay}ms` }}
    >
      <div className={`border-2 rounded-lg p-6 min-h-[200px] transition-all duration-500 ${
        isRevealed 
          ? 'border-green-400 bg-green-900/30 shadow-[0_0_30px_rgba(0,255,65,0.4)]' 
          : 'border-red-400 bg-red-900/20 hover:border-yellow-400'
      }`}>
        
        {/* Header */}
        <div className="flex items-center justify-between mb-4">
          <span className="text-3xl">{icon}</span>
          <span className={`px-3 py-1 rounded-full text-sm font-bold transition-all duration-300 ${
            isRevealed 
              ? 'bg-green-400 text-black' 
              : 'bg-red-400 text-white animate-pulse'
          }`}>
            {isRevealed ? '‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á' : '‚ùå ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ú‡∏¥‡∏î'}
          </span>
        </div>

        {/* Content */}
        {!isRevealed ? (
          <div className="space-y-4">
            <h3 className="text-lg font-bold text-red-300">‡∏Ñ‡∏¥‡∏î‡∏ß‡πà‡∏≤...</h3>
            <p className="text-red-200">{myth}</p>
            <div className="text-center mt-4">
              <button className="bg-yellow-600 hover:bg-yellow-500 text-black font-bold py-2 px-4 rounded-full transition-colors animate-bounce">
                üëÜ ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á!
              </button>
            </div>
          </div>
        ) : (
          <div className="space-y-4">
            <h3 className="text-lg font-bold text-green-300">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏Ñ‡∏∑‡∏≠...</h3>
            <p className="text-green-200">{truth}</p>
            <div className="flex justify-center mt-4">
              <div className="flex space-x-2">
                {[...Array(5)].map((_, i) => (
                  <span key={i} className="text-yellow-400 animate-pulse" style={{ animationDelay: `${i * 0.2}s` }}>
                    ‚≠ê
                  </span>
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

// Progress Bar Component
const ProgressBar = ({ progress }) => {
  return (
    <div className="w-full bg-gray-700 rounded-full h-3 mb-6">
      <div 
        className="bg-gradient-to-r from-green-400 to-blue-400 h-3 rounded-full transition-all duration-1000 relative overflow-hidden"
        style={{ width: `${progress}%` }}
      >
        <div className="absolute inset-0 bg-white/30 animate-pulse" />
      </div>
      <p className="text-center mt-2 text-sm text-green-300">
        ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ú‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß {Math.round(progress)}% üöÄ
      </p>
    </div>
  );
};

// Floating Animation Component
const FloatingIcons = () => {
  const icons = ['üíª', 'ü§ñ', 'üì±', 'üéÆ', 'üåê', '‚ö°', 'üî¨', 'üìä'];
  
  return (
    <div className="fixed inset-0 pointer-events-none">
      {icons.map((icon, index) => (
        <div
          key={index}
          className="absolute text-2xl opacity-20 animate-bounce"
          style={{
            left: `${10 + (index * 12)}%`,
            top: `${20 + (index % 3) * 25}%`,
            animationDelay: `${index * 0.5}s`,
            animationDuration: `${2 + (index % 3)}s`
          }}
        >
          {icon}
        </div>
      ))}
    </div>
  );
};

export default function MythsSlide() {
  const [revealedMyths, setRevealedMyths] = useState(new Set());
  const [showSuccess, setShowSuccess] = useState(false);
  const [currentQuote, setCurrentQuote] = useState(0);

  const inspiringQuotes = [
    "üí° \"‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏°‡∏∑‡∏≠‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ\"",
    "üöÄ \"‡∏ó‡∏∏‡∏Å‡πÅ‡∏≠‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏ò‡∏≠‡πÉ‡∏ä‡πâ ‡∏°‡∏µ‡∏Ñ‡∏ô‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏ò‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á\"",
    "‚≠ê \"‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ ‡πÅ‡∏Ñ‡πà‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡πá‡∏û‡∏≠\"",
    "üåü \"CS ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÅ‡∏Ñ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÇ‡∏•‡∏Å\""
  ];

  const myths = [
    {
      id: 1,
      icon: 'üßÆ',
      myth: '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πà‡∏á‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏°‡∏≤‡∏Å‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ô Computer Science ‡πÑ‡∏î‡πâ',
      truth: '‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á Logic ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤! ‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏£‡∏∞‡∏î‡∏±‡∏ö ‡∏°.‡∏õ‡∏•‡∏≤‡∏¢ + ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πá‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏£‡∏¥‡∏®‡∏ô‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡πà‡∏ô‡πÄ‡∏Å‡∏°‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤'
    },
    {
      id: 2,
      icon: 'üë®‚Äçüíª',
      myth: '‡∏à‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÅ‡∏Ñ‡πà‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
      truth: '‡∏°‡∏µ‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏ö! UX Designer, Data Scientist, Game Developer, Cybersecurity, AI Engineer, Product Manager ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏°‡πâ‡πÅ‡∏ï‡πà YouTuber Tech ‡∏Å‡πá‡πÑ‡∏î‡πâ!'
    },
    {
      id: 3,
      icon: 'üéØ',
      myth: '‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ',
      truth: '‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏•‡∏¢! ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏®‡∏π‡∏ô‡∏¢‡πå ‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô ‡∏°‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏≤‡∏¢‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏°‡∏≤‡∏Å'
    },
    {
      id: 4,
      icon: 'ü§ù',
      myth: '‡∏ô‡∏±‡∏Å‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ñ‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏π‡∏î‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡πÉ‡∏Ñ‡∏£',
      truth: '‡∏ú‡∏¥‡∏î‡∏°‡∏≤‡∏Å! ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏∏‡∏¢‡∏Å‡∏±‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏õ‡∏£‡∏∞‡∏ä‡∏∏‡∏°‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡∏° ‡πÅ‡∏•‡∏∞‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÑ‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡πÉ‡∏´‡πâ‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡∏ü‡∏±‡∏á Communication Skills ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å!'
    },
    {
      id: 5,
      icon: 'üí∞',
      myth: '‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏π‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏•‡∏Å‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡∏à‡∏ô‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï',
      truth: '‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô ‡πÅ‡∏ï‡πà‡∏´‡∏•‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ Work-Life Balance ‡∏î‡∏µ ‡∏°‡∏µ Flexible Time, Work from Home ‡πÅ‡∏•‡∏∞ Benefit ‡πÄ‡∏à‡πã‡∏á‡πÜ ‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å'
    },
    {
      id: 6,
      icon: 'üéÆ',
      myth: 'Computer Science ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏Ñ‡πà‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏≤‡∏¢',
      truth: '‡πÑ‡∏°‡πà‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏•‡∏¢! ‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á‡πÄ‡∏Å‡πà‡∏á‡πÜ ‡πÉ‡∏ô‡∏ß‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏Ñ‡πÄ‡∏¢‡∏≠‡∏∞‡∏°‡∏≤‡∏Å ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà Ada Lovelace ‡∏Ñ‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÇ‡∏•‡∏Å ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏°‡∏µ CEO ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏´‡∏ç‡∏¥‡∏á ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏™‡∏°‡∏≠!'
    }
  ];

  const handleRevealMyth = (mythId) => {
    setRevealedMyths(prev => new Set([...prev, mythId]));
    
    // Show success animation when all myths are revealed
    if (revealedMyths.size + 1 === myths.length) {
      setTimeout(() => setShowSuccess(true), 500);
    }
  };

  const progress = (revealedMyths.size / myths.length) * 100;

  // Rotate inspiring quotes
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentQuote(prev => (prev + 1) % inspiringQuotes.length);
    }, 4000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="bg-gradient-to-br from-gray-900 to-black text-white p-6 relative py-8">
      
      {/* Floating Background Icons */}
      <FloatingIcons />

      {/* Main Content */}
      <div className="relative z-10 max-w-7xl mx-auto">
        
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl md:text-6xl font-bold mb-4 bg-gradient-to-r from-red-400 via-yellow-400 to-green-400 bg-clip-text text-transparent">
            üí• ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡∏ú‡∏¥‡∏î!
          </h1>
          <p className="text-xl md:text-2xl text-gray-300 mb-6">
            ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô Computer Science üéì
          </p>
          
          {/* Inspiring Quote */}
          <div className="bg-black/40 backdrop-blur-sm border border-green-400 rounded-lg p-4 mb-6 transition-all duration-1000">
            <p className="text-lg text-green-300">
              {inspiringQuotes[currentQuote]}
            </p>
          </div>

          {/* Progress Bar */}
          <ProgressBar progress={progress} />
        </div>

        {/* Instructions */}
        <div className="text-center mb-8">
          <div className="inline-block bg-blue-900/30 border border-blue-400 rounded-lg p-4">
            <p className="text-blue-300 text-lg">
              üëÜ <span className="font-bold">‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏™‡∏µ‡πÅ‡∏î‡∏á</span> ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á! üïµÔ∏è‚Äç‚ôÄÔ∏è
            </p>
          </div>
        </div>

        {/* Myths Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          {myths.map((myth, index) => (
            <MythCard
              key={myth.id}
              myth={myth.myth}
              truth={myth.truth}
              icon={myth.icon}
              isRevealed={revealedMyths.has(myth.id)}
              onReveal={() => handleRevealMyth(myth.id)}
              delay={index * 200}
            />
          ))}
        </div>

        {/* Success Message */}
        {showSuccess && (
          <div className="text-center mb-8 animate-bounce">
            <div className="inline-block bg-gradient-to-r from-green-400 to-blue-400 text-black font-bold text-2xl p-6 rounded-full">
              üéâ ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏°‡∏≤‡∏Å! ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß! üéâ
            </div>
          </div>
        )}

        {/* Call to Action */}
        <div className="text-center bg-gradient-to-r from-purple-900/50 to-blue-900/50 backdrop-blur-sm border border-purple-400 rounded-lg p-8">
          <h2 className="text-3xl font-bold mb-4 text-purple-300">üöÄ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ä‡πà‡∏°‡∏±‡πâ‡∏¢?</h2>
          <p className="text-xl mb-6 text-gray-300">
            Computer Science ‡πÄ‡∏õ‡∏¥‡∏î‡πÇ‡∏•‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì - ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏≠‡∏õ ‡πÄ‡∏Å‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÇ‡∏•‡∏Å! üåç
          </p>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
            <div className="bg-green-900/30 border border-green-400 rounded-lg p-4">
              <div className="text-2xl mb-2">üìö</div>
              <h3 className="font-bold text-green-300">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ</h3>
              <p className="text-sm">‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏à‡∏≤‡∏Å Scratch ‡∏´‡∏£‡∏∑‡∏≠ Python</p>
            </div>
            
            <div className="bg-blue-900/30 border border-blue-400 rounded-lg p-4">
              <div className="text-2xl mb-2">ü§ù</div>
              <h3 className="font-bold text-blue-300">‡∏´‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏≤‡∏á</h3>
              <p className="text-sm">‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ä‡∏∏‡∏°‡∏ä‡∏ô Developer ‡∏´‡∏£‡∏∑‡∏≠ Coding Bootcamp</p>
            </div>
            
            <div className="bg-purple-900/30 border border-purple-400 rounded-lg p-4">
              <div className="text-2xl mb-2">üéØ</div>
              <h3 className="font-bold text-purple-300">‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢</h3>
              <p className="text-sm">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏™‡∏ô‡πÉ‡∏à</p>
            </div>
          </div>
        </div>
      </div>

      <style jsx>{`
        @keyframes slideInRight {
          from {
            opacity: 0;
            transform: translateX(50px);
          }
          to {
            opacity: 1;
            transform: translateX(0);
          }
        }
      `}</style>
    </div>
  );
}